#pragma once
namespace jehn {
	struct end_t {};
	template<class T>
	class increaser {
		T t;
	public:
		inline increaser(T&& t) : t(std::move(t)) {}
		increaser& operator++() {
			++t;
			return *this;

		}
		increaser operator++(int) {
			return increaser(t++);
		}
		increaser& operator--() {
			--t;
			return *this;

		}
		increaser operator--(int) {
			return increaser(t--);
		}
		T operator*() {
			return t;
		}
		bool operator!=(increaser<T>& a) {
			return t!=a.t;
		}
		bool operator!=(end_t) {
			return true;
		}
	};
	template<class T = int>
	class range {
		T s;
		T t;
	public:
		inline range(T&& t) :s(0), t(std::forward<T>(t)) {}
		inline range(T&& s, T&& t) : s(std::forward<T>(s)), t(std::forward<T>(t)) {}
		increaser<T> begin() { return increaser<T>(s); }
		increaser<T> end() { return increaser<T>(t); }
		range<T>& operator++() {
			++s;
			return *this;

		}
		range<T> operator++(int) {
			range<T> o = *this;
			s++;
			return o;
		}
		range<T>& operator--() {
			--s;
			return *this;

		}
		range<T> operator--(int) {
			range<T> o = *this;
			s--;
			return o;
		}
		T operator*() {
			return s;
		}
		bool operator!=(end_t) {
			return s != t;
		}
	};
	template<class T>
	class repeater {
		T t;
	public:
		inline repeater(T&& t) :t(std::forward<T>(t)) {}
		repeater& operator++() {
			return *this;
		}
		repeater operator++(int) {
			return *this;
		}
		repeater& operator--() {
			return *this;

		}
		repeater operator--(int) {
			return *this;
		}
		T operator*() {
			return t;
		}
		T* operator->() {
			return &t;
		}
		bool operator!=(end_t) {
			return true;
		}
	};
	template<class I,class F>
	class map {
		F f;
		I i;
	public:
		map(F f, I enumerable) :f(f), i(enumerable) {}
		auto begin() {
			return i.begin();
		}
		auto end() {
			return i.end();
		}
		map& operator++() {
			++i;
			return *this;
		}
		map operator++(int) {
			map o = *this;
			i++;
			return (o);
		}
		map& operator--() {
			--i;
			return *this;
		}
		map operator--(int) {
			map o = *this;
			i--;
			return o;
		}
		decltype(auto) operator*() {
			return f(*i);
		}
		decltype(auto) operator->() {
			return &(f(*i));
		}
		bool operator!=(end_t) {
			return i != end_t();
		}
	};
	template<class I,class size_type=size_t>
	class take {
		size_type s;
		I i;
	public:
		take(I i,size_type s):s(s),i(i){}
		bool operator!=(end_t) {
			if (!i != end_t())return false;
			return s!=0;
		}
		take& operator++() {
			s--;
			++i;
			return *this;
		}
		take operator++(int) {
			map o = *this;
			s--;
			i++;
			return o;
		}
		take& operator--() {
			s++;
			--i;
			return *this;
		}
		take operator--(int) {
			map o = *this;
			s++;
			i--;
			return o;
		}
		decltype(auto) operator*() {
			return *i;
		}
		decltype(auto) operator->() {
			return i.operator->();
		}
	};
	template<class I, class F>
	class takeWhile {
		I i;
	public:
		F f;
 		takeWhile(F f, I i) :f(f), i(i) {}
		bool operator!=(end_t) {
			if (!(i != end_t()))return false;
			return f(*i);
		}
		takeWhile& operator++() {
			++i;
			return *this;
		}
		takeWhile operator++(int) {
			takeWhile o = *this;
			i++;
			return o;
		}
		takeWhile& operator--() {
			--i;
			return *this;
		}
		takeWhile operator--(int) {
			takeWhile o = *this;
			i--;
			return o;
		}
		decltype(auto) operator*() {
			return *i;
		}
		decltype(auto) operator->() {
			return i.operator->();
		}
	};
	template<class I, class F>
	class filter {
		F f;
		I i;
	public:
		filter(F f, I i) :f(f), i(i) {}
		bool operator!=(end_t) {
			return i!=end_t();
		}
		filter& operator++() {
			while (i != end_t())if (f(*(i++)))break;
			return *this;
		}
		filter operator++(int) {
			filter o = *this;
			++(*this);
			return o;
		}
		filter& operator--() {
			while (!f(*(i--)));
			return *this;
		}
		filter operator--(int) {
			filter o = *this;
			--(*this);
			return o;
		}
		decltype(auto) operator*() {
			return *i;
		}
		decltype(auto) operator->() {
			return i.operator->();
		}
	};

	template<class Iter1, class Iter2>
	class capper_t {
		Iter1 iter1;
		Iter2 iter2;
	public:
		capper_t(Iter1 iter1, Iter2 iter2) :iter1(iter1), iter2(iter2) {}
		Iter1 begin() { return iter1; }
		Iter2 end() { return iter2; }
		capper_t& operator++() {
			++iter1;
			return *this;
		}
		capper_t operator++(int) {
			capper_t o = *this;
			iter1++;
			return (o);
		}
		capper_t& operator--() {
			--iter1;
			return *this;
		}
		capper_t operator--(int) {
			capper_t o = *this;
			iter1--;
			return o;
		}
		decltype(auto) operator*() {
			return iter1;
		}
		decltype(auto) operator->() {
			return iter1.operator->();
		}
		bool operator!=(end_t) {
			return iter1 != iter2;
		}
	};

	template<class T>
	class move_container {
		T s;
	public:
		move_container(T s) :s(std::forward<T>(s)) {}
		auto cbegin() {
			return std::make_move_iterator(s.cbegin());
		}
		auto begin() {
			return std::make_move_iterator(s.begin());
		}
		auto cend() {
			return std::make_move_iterator(s.cend());
		}
		auto end() {
			return std::make_move_iterator(s.end());
		}
	};
	template<class T>
	class move_Enumerable {
		T s;
	public:
		move_Enumerable(T s) :s(std::forward<T>(s)) {}
		auto cbegin() {
			return std::make_move_iterator(s.cbegin());
		}
		auto begin() {
			return std::make_move_iterator(s.begin());
		}
		auto cend() {
			return std::make_move_iterator(s.cend());
		}
		auto end() {
			return std::make_move_iterator(s.end());
		}
		bool operator!=(end_t) {
			return s != end_t();
		}
		move_Enumerable<T>& operator++() {
			++s;
			return *this;
		}
		move_Enumerable<T> operator++(int) {
			move_Enumerable<T> o = *this;
			++(*this);
			return o;
		}
		move_Enumerable<T>& operator--() {
			--s;
			return *this;
		}
		move_Enumerable<T> operator--(int) {
			move_Enumerable<T> o = *this;
			--(*this);
			return o;
		}
		decltype(auto) operator*() {
			return std::move(*i);
		}
	};
	template<class Iter1, class Iter2>
	inline capper_t<Iter1, Iter2> capper(Iter1 iter1, Iter2 iter2) { return capper_t(iter1, iter2); }
	template<class T>
	inline auto make_move_container(T&& s) { return move_container<T>(s); };
	template<class T>
	inline auto make_move_Enumerable(T&& s) { return move_Enumerable<T>(s); };



	template<class T,class I>
	void copyTo(T container, I iter) {
		for (auto i = container.begin(); i != container.end();) {
			*(iter++) = *(i++);
		}
	}
	template<class T, class I>
	void copyFrom(T container, I iter) {
		for (auto i = container.begin(); i != container.end();) {
			*(i++) = *(iter++);
		}
	}
}